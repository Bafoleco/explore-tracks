import {TrackInfo} from '../types'
export const hci: TrackInfo = {"requirements": [{"numRequired": "4", "courseOptions": [{"title": "Introduction to Human-Computer Interaction Design", "description": "Introduces fundamental methods and principles for designing, implementing, and evaluating user interfaces. Topics: user-centered design, rapid prototyping, experimentation, direct manipulation, cognitive principles, visual design, social software, software tools. Learn by doing: work with a team on a quarter-long design project, supported by lectures, readings, and studios. Prerequisite: 106B or X or equivalent programming experience. Recommended that CS Majors have also taken one of 142, 193P, or 193A.nnPlease note: Less than 5 is only allowed for graduate students.", "code": "CS 147"}, {"title": "Human-Computer Interaction: Foundations and Frontiers", "description": "(Previously numbered CS376.) How will the future of human-computer interaction evolve? This course equips students with the major animating theories of human-computer interaction, and connects those theories to modern innovations in research. Major theories are drawn from interaction (e.g., tangible and ubiquitous computing), social computing (e.g., Johansen matrix), and design (e.g., reflective practitioner, wicked problems), and span domains such as AI+HCI (e.g., mixed initiative interaction), accessibility (e.g., ability based design), and interface software tools (e.g., threshold/ceiling diagrams). Students read and comment on multiple research papers per week, and perform a quarter-long research project. Prerequisites: For CS and Symbolic Systems undergraduates/masters students, CS147 or CS247. No prerequisite for PhD students or students outside of CS and Symbolic Systems.", "code": "CS 347"}, {"title": "Web Applications", "description": "Concepts and techniques used in constructing interactive web applications. Browser-side web facilities such as HTML, cascading stylesheets, the document object model, and JavaScript frameworks and Server-side technologies such as server-side JavaScript, sessions, and object-oriented databases. Issues in web security and application scalability. New models of web application deployment. Prerequisite: CS 107.", "code": "CS 142"}]}, {"numRequired": "2", "courseOptions": [{"title": "Social Computing (SOC 174, SOC 274)", "description": "Today we interact with our friends and enemies, our team partners and romantic partners, and our organizations and societies, all through computational systems. How do we design these social computing systems to be effective and responsible? This course covers design patterns for social computing systems and the foundational ideas that underpin them. Students will engage with the course topic via readings, reading responses, and in-class discussions. Course available for 3-4 units; students enrolling in the 4-unit option will have the opportunity to create new computationally-mediated social environments through a group project. This group project will have weekly project work sections starting Week 2", "code": "CS 278"}, {"title": "Data Visualization (SYMSYS 195V)", "description": "Techniques and algorithms for creating effective visualizations based on principles from graphic design, visual art, perceptual psychology, and cognitive science.  Topics: graphical perception, data and image models, visual encoding, graph and tree layout, color, animation, interaction techniques, automated design.  Lectures, reading, and project.  Prerequisite: one of CS147, CS148, or equivalent.", "code": "CS 448B"}]}, {"numRequired": "2", "courseOptions": [{"title": "Social Computing (SOC 174, SOC 274)", "description": "Today we interact with our friends and enemies, our team partners and romantic partners, and our organizations and societies, all through computational systems. How do we design these social computing systems to be effective and responsible? This course covers design patterns for social computing systems and the foundational ideas that underpin them. Students will engage with the course topic via readings, reading responses, and in-class discussions. Course available for 3-4 units; students enrolling in the 4-unit option will have the opportunity to create new computationally-mediated social environments through a group project. This group project will have weekly project work sections starting Week 2", "code": "CS 278"}, {"title": "Data Visualization (SYMSYS 195V)", "description": "Techniques and algorithms for creating effective visualizations based on principles from graphic design, visual art, perceptual psychology, and cognitive science.  Topics: graphical perception, data and image models, visual encoding, graph and tree layout, color, animation, interaction techniques, automated design.  Lectures, reading, and project.  Prerequisite: one of CS147, CS148, or equivalent.", "code": "CS 448B"}, {"title": "User Interface Design Project", "description": "Advanced methods for designing, prototyping, and evaluating user interfaces to computing applications. Novel interface technology, advanced interface design methods, and prototyping tools. Substantial, quarter-long course project that will be presented in a public presentation. Prerequisites: CS 147, or permission of instructor.", "code": "CS 194H"}, {"title": "Exploring Computational Journalism (COMM 281)", "description": "This project-based course will explore the field of computational journalism, including the use of Data Science, Info Visualization, AI, and emerging technologies to help journalists discover and tell stories, understand their audience, advance free speech, and build trust. Please apply by Jan 15, 2021 at ecj.stanford.edu", "code": "CS 206"}, {"title": "Software Project Experience with Corporate Partners", "description": "Two-quarter project course. Focus is on real-world software development. Corporate partners seed projects with loosely defined challenges from their R&amp;D labs; students innovate to build their own compelling software solutions. Student teams are treated as start-up companies with a budget and a technical advisory board comprised of instructional staff and corporate liaisons. Teams will typically travel to the corporate headquarters of their collaborating partner, meaning some teams will travel internationally. Open loft classroom format such as found in Silicon Valley software companies. Exposure to: current practices in software engineering; techniques for stimulating innovation; significant development experience with creative freedoms; working in groups; real-world software engineering challenges; public presentation of technical work; creating written descriptions of technical work. Prerequisites: CS109 and CS161.", "code": "CS 210A"}, {"title": "Topics in Human-Computer Interaction", "description": "Contents change each quarter. May be repeated for credit. See http://hci.stanford.edu/academics for offerings.", "code": "CS 377"}, {"title": "Introduction to the Design of Smart Products (CS 377N)", "description": "This course will focus on the technical mechatronic skills as well as the human factors and interaction design considerations required for the design of smart products and devices. Students will learn techniques for rapid prototyping of smart devices, best practices for physical interaction design, fundamentals of affordances and signifiers, and interaction across networked devices. Students will be introduced to design guidelines for integrating electrical components such as PCBs into mechanical assemblies and consider the physical form of devices, not just as enclosures but also as a central component of the smart product. Prerequisites include: CS106A and E40 highly recommended, or instructor approval.", "code": "ME 216M"}]}, {"numRequired": "x", "courseOptions": [{"title": "Machine Learning (STATS 229)", "description": "Topics: statistical pattern recognition, linear and non-linear regression, non-parametric methods, exponential family, GLMs, support vector machines, kernel methods, deep learning, model/feature selection, learning theory, ML advice, clustering, density estimation, EM, dimensionality reduction, ICA, PCA, reinforcement learning and adaptive control, Markov decision processes, approximate dynamic programming, and policy search. Prerequisites: knowledge of basic computer science principles and skills at a level sufficient to write a reasonably non-trivial computer program in Python/NumPy to the equivalency of CS106A, CS106B, or CS106X, familiarity with probability theory to the equivalency of CS 109, MATH151, or STATS 116, and familiarity with multivariable calculus and linear algebra to the equivalency of MATH51 or CS205.", "code": "CS 229"}, {"title": "Programming Languages", "description": "This course explores foundational models of computation, such as the lambda calculus and other small calculi, &nbsp;and the incorporation of basic advances in PL theory into modern programming languages such as Haskell and Rust. &nbsp;Topics include type systems (polymorphism, algebraic data types, static vs. dynamic), control flow (exceptions, continuations), concurrency/parallelism, metaprogramming, verification, and the semantic gap between computational models and modern hardware. The study of programming languages is equal parts systems and theory, looking at how a rigorous understanding of the semantics of computation enables formal reasoning about the behavior and properties of complex real-world systems. &nbsp;Prerequisites: 103, 110.", "code": "CS 242"}, {"title": "Mining Massive Data Sets", "description": "The availability of massive datasets is revolutionizing science and industry. This course discusses data mining and machine learning algorithms for analyzing very large amounts of data. Topics include: Big data systems (Hadoop, Spark); Link Analysis (PageRank, spam detection); Similarity search (locality-sensitive hashing, shingling, min-hashing); Stream data processing; Recommender Systems; Analysis of social-network graphs; Association rules; Dimensionality reduction (UV, SVD, and CUR decompositions); Algorithms for large-scale mining (clustering, nearest-neighbor search); Large-scale machine learning (decision tree ensembles); Multi-armed bandit; Computational advertising. Prerequisites: At least one of CS107 or CS145.", "code": "CS 246"}, {"title": "Interactive Computer Graphics", "description": "This course provides a comprehensive introduction to interactive computer graphics, focusing on fundamental concepts and techniques, as well as their cross-cutting relationship to multiple problem domains in interactive graphics (such as rendering, animation, geometry, image processing). Topics include: 2D and 3D drawing, sampling theory, interpolation, rasterization, image compositing, the real-time GPU graphics pipeline (and parallel rendering), VR rendering, geometric transformations, curves and surfaces, geometric data structures, subdivision, meshing, spatial hierarchies, image processing, time integration, physically-based animation, and inverse kinematics.  The course will involve several in-depth programming assignments and a self-selected final project that explores concepts covered in the class. Prerequisite: CS 107, MATH 51.", "code": "CS 248"}, {"title": "Software Engineering", "description": "Software specification, testing and verification. The emphasis is on automated tools for developing reliable software. The course covers material---drawn primarily from recent research papers---on the technologynunderlying these tools. Assignments supplement the lectures with hands-on experience in using these tools and customizing them for solving new problems.  The course is appropriate for students intending to pursue research in program analysis and verification, as well as for those who wish to add the use of advanced software tools to their skill set. Prerequisites: 108. Recommended: a project course such as 140, 143 or 145.", "code": "CS 295"}, {"title": "Project in Mining Massive Data Sets", "description": "Students work in teams of three to solve a problem involving the analysis of a massive dataset.  A proposal, early in March is required. There will be an information session (announced in CS246) explaining the datasets available in early March and this information will also be on the CS341 course website in late February.  Each accepted team will be assigned a mentor who will work with them regularly throughout the quarter.  Teams will also be provided access to significant computing resources on a commercial public cloud.", "code": "CS 341"}, {"title": "Computer Laboratory", "description": "For CS graduate students. A substantial computer program is designed and implemented; written report required. Recommended as a preparation for dissertation research. Register using the section number associated with the instructor. Prerequisite: consent of instructor.", "code": "CS 393"}, {"title": "Independent Database Project", "description": "For graduate students in Computer Science. Use of database management or file systems for a substantial application or implementation of components of database management system. Written analysis and evaluation required. Register using the section number associated with the instructor. Prerequisite: consent of instructor.", "code": "CS 395"}, {"title": "Independent Project", "description": "Letter grade only. This course is for masters students only. Undergraduate students should enroll in CS199; PhD students should enroll in CS499. Letter grade; if not appropriate, enroll in CS399P. Register using the section number associated with the instructor. Prerequisite: consent of instructor.", "code": "CS 399"}]}]}