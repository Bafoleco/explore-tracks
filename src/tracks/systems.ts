import {TrackInfo} from '../types'
export const systems: TrackInfo = {"requirements": [{"numRequired": "1", "courseOptions": [{"title": "Operating Systems and Systems Programming", "description": "Covers key concepts in computer systems through the lens of operatingnsystem design and implementation.  Topics include threads, scheduling,nprocesses, virtual memory, synchronization, multi-core architectures,nmemory consistency, hardware atomics, memory allocators, linking, I/O,nfile systems, and virtual machines.  Concepts are reinforced with fournkernel programming projects in the Pintos operating system.  This classnmay be taken as an accelerated single-class alternative to the CS111,nCS112 sequence; conversely, the class should not be taken by studentsnwho have already taken CS111 or CS112", "code": "CS 140"}, {"title": "Operating systems design and implementation", "description": "Students will implement a simple, clean operating system (virtual  memory, processes, file system) in the  C programming language, on a rasberry pi computer and use the result to run a variety of devices and implement a final project.  All hardware is supplied by the instructor, and no previous experience with operating systems, raspberry pi, or embedded programming is required.", "code": "CS 140E"}, {"title": "Operating systems design and implementation", "description": "Students will implement a simple, clean operating system (virtual  memory, processes, file system) in the  C programming language, on a rasberry pi computer and use the result to run a variety of devices and implement a final project.  All hardware is supplied by the instructor, and no previous experience with operating systems, raspberry pi, or embedded programming is required.", "code": "CS 140E"}, {"title": "Operating systems kernel implementation project", "description": "Students will learn the details of how operating systems work throughnfour implementation projects in the Pintos operating system.  Thenprojects center around threads, processes, virtual memory, and filensystems.  This class should not be taken by students who have taken ornplan to take CS212 or CS140.  Prerequisite: CS111 or permission of theninstructor.", "code": "CS 112"}, {"title": "Operating Systems and Systems Programming", "description": "Covers key concepts in computer systems through the lens of operatingnsystem design and implementation.  Topics include threads, scheduling,nprocesses, virtual memory, synchronization, multi-core architectures,nmemory consistency, hardware atomics, memory allocators, linking, I/O,nfile systems, and virtual machines.  Concepts are reinforced with fournkernel programming projects in the Pintos operating system.  This classnmay be taken as an accelerated single-class alternative to the CS111,nCS112 sequence; conversely, the class should not be taken by studentsnwho have already taken CS111 or CS112.", "code": "CS 212"}]}, {"numRequired": "4", "courseOptions": [{"title": "Software Design Studio", "description": "This course teaches the art of software design: how to decompose large complex systems into classes that can be implemented and maintained easily. Topics include the causes of complexity, modular design, techniques for creating deep classes, minimizing the complexity associated with exceptions, in-code documentation, and name selection. The class involves significant system software implementation and uses an iterative approach consisting of implementation, review, and revision. The course is taught in a studio format with in-class discussions and code reviews in addition to lectures. Prerequisite: CS 140 or equivalent. Apply at: https://web.stanford.edu/class/cs190", "code": "CS 190"}, {"title": "Programming Languages", "description": "This course explores foundational models of computation, such as the lambda calculus and other small calculi, &nbsp;and the incorporation of basic advances in PL theory into modern programming languages such as Haskell and Rust. &nbsp;Topics include type systems (polymorphism, algebraic data types, static vs. dynamic), control flow (exceptions, continuations), concurrency/parallelism, metaprogramming, verification, and the semantic gap between computational models and modern hardware. The study of programming languages is equal parts systems and theory, looking at how a rigorous understanding of the semantics of computation enables formal reasoning about the behavior and properties of complex real-world systems. &nbsp;Prerequisites: 103, 110.", "code": "CS 242"}, {"title": "Program Analysis and Optimizations", "description": "Program analysis techniques used in compilers and software development tools to improve productivity, reliability, and security. The methodology of applying mathematical abstractions such as graphs, fixpoint computations, binary decision diagrams in writing complex software, using compilers as an example. Topics include data flow analysis, instruction scheduling, register allocation, parallelism, data locality, interprocedural analysis, and garbage collection. Prerequisites: 103 or 103B, and 107.", "code": "CS 243"}, {"title": "Advanced Topics in Networking", "description": "Classic papers, new ideas, and research papers in networking. Architectural principles: why the Internet was designed this way? Congestion control. Wireless and mobility; software-defined networks (SDN) and network virtualization; content distribution networks; packet switching; data-center networks. Prerequisite: 144 or equivalent.", "code": "CS 244"}, {"title": "Distributed Systems", "description": "Distributed operating systems and applications issues, emphasizing high-level protocols and distributed state sharing as the key technologies. Topics: distributed shared memory, object-oriented distributed system design, distributed directory services, atomic transactions and time synchronization, application-sufficient consistency, file access, process scheduling, process migration, and storage/communication abstractions on distribution, scale, robustness in the face of failure, and security.  Prerequisites: CS 144.", "code": "CS 244B"}, {"title": "Principles of Data-Intensive Systems", "description": "Most important computer applications have to reliably manage and manipulate datasets. This course covers the architecture of modern data storage and processing systems, including relational databases, cluster computing frameworks, streaming systems and machine learning systems. Topics include storage management, query optimization, transactions, concurrency, fault recovery, and parallel processing, with a focus on the key design ideas shared across many types of data-intensive systems. Prerequisites: CS 145, 161.", "code": "CS 245"}, {"title": "Interactive Computer Graphics", "description": "This course provides a comprehensive introduction to interactive computer graphics, focusing on fundamental concepts and techniques, as well as their cross-cutting relationship to multiple problem domains in interactive graphics (such as rendering, animation, geometry, image processing). Topics include: 2D and 3D drawing, sampling theory, interpolation, rasterization, image compositing, the real-time GPU graphics pipeline (and parallel rendering), VR rendering, geometric transformations, curves and surfaces, geometric data structures, subdivision, meshing, spatial hierarchies, image processing, time integration, physically-based animation, and inverse kinematics.  The course will involve several in-depth programming assignments and a self-selected final project that explores concepts covered in the class. Prerequisite: CS 107, MATH 51.", "code": "CS 248"}, {"title": "Computer Graphics: Image Synthesis Techniques", "description": "Intermediate level, emphasizing high-quality image synthesis algorithms and systems issues in rendering. Topics include: Reyes and advanced rasterization, including motion blur and depth of field; ray tracing and physically based rendering; Monte Carlo algorithms for rendering, including direct illumination and global illumination; path tracing and photon mapping; surface reflection and light source models; volume rendering and subsurface scattering; SIMD and multi-core parallelism for rendering. Written assignments and programming projects. Prerequisite: 248 or equivalent. Recommended: Fourier analysis or digital signal processing.", "code": "CS 348B"}, {"title": "Introduction to VLSI Systems", "description": "Provides a quick introduction to MOS transistors and IC fabrication and then creates abstractions to allow you to create and reason about complex digital systems.  It uses a switch resistor model of a transistor, uses it to model gates, and then shows how gates and physical layout can be synthesized from Verilog or SystemVerilog descriptions.  Most of the class will be spent on providing techniques to create designs that can be validated, are low power, provide good performance, and can be completed in finite time. Prerequisites: 101A, 108, and 180; familiarity with transistors, logic design, Verilog and digital system organization", "code": "EE 271"}, {"title": "Computer Systems Architecture", "description": "Course focuses on how to build modern computing systems, namely notebooks, smartphones, and data centers, covering primarily their hardware architecture and certain system software aspects. For each system class, we cover the system architecture, processor technology, advanced memory hierarchy and I/O organization, power and energy management, and reliability. We will also cover topics such as interactions with system software, virtualization, solid state storage, and security. The programming assignments allow students to explore performance/energy tradeoffs when using heterogeneous hardware resources on smartphone devices. Prerequisite: EE180. Recommended: CS 140.", "code": "EE 282"}]}, {"numRequired": "x", "courseOptions": [{"title": "Parallel Computing", "description": "This course is an introduction to parallelism and parallel programming. Most new computer architectures are parallel; programming these machines requires knowledge of the basic issues of and techniques for writing parallel software. Topics: varieties of parallelism in current hardware (e.g., fast networks, multicore, accelerators such as GPUs, vector instruction sets), importance of locality, implicit vs. explicit parallelism, shared vs. non-shared memory, synchronization mechanisms (locking, atomicity, transactions, barriers), and parallel programming models (threads, data parallel/streaming, MapReduce, Apache Spark, SPMD, message passing, SIMT, transactions, and nested parallelism). Significant parallel programming assignments will be given as homework. The course is open to students who have completed the introductory CS course sequence through 110.", "code": "CS 149"}, {"title": "Hardware Accelerators for Machine Learning", "description": "This course provides in-depth coverage of the architectural techniques used to design accelerators for training and inference in machine learning systems. This course will cover classical ML algorithms such as linear regression and support vector machines as well as DNN models such as convolutional neural nets, and recurrent neural nets. We will consider both training and inference for these models and discuss the impact of parameters such as batch size, precision, sparsity and compression on the accuracy of these models. We will cover the design of accelerators for ML model inference and training. Students will become familiar with hardware implementation techniques for using parallelism, locality, and low precision to implement the core computational kernels used in ML. To design energy-efficient accelerators, students will develop the intuition to make trade-offs between ML model parameters and hardware implementation techniques. Students will read recent research papers and complete a design project. Prerequisites: CS 149 or EE 180. CS 229 is ideal, but not required.", "code": "CS 217"}, {"title": "Embedded Systems Workshop (EE 285)", "description": "Project-centric building hardware and software for embedded computing systems. This year the course projects are on a large interactive light sculpture to be installed in Packard. Syllabus topics will be determined by the needs of the enrolled students and projects. Examples of topics include: interrupts and concurrent programming, mechanical control, state-based programming models, signaling and frequency response, mechanical design, power budgets, software, firmware, and PCB design. Interested students can help lead community workshops to begin building the installation. Prerequisites: one of CS107, EE101A, EE108, ME80.", "code": "CS 241"}, {"title": "Distributed Systems", "description": "Distributed operating systems and applications issues, emphasizing high-level protocols and distributed state sharing as the key technologies. Topics: distributed shared memory, object-oriented distributed system design, distributed directory services, atomic transactions and time synchronization, application-sufficient consistency, file access, process scheduling, process migration, and storage/communication abstractions on distribution, scale, robustness in the face of failure, and security.  Prerequisites: CS 144.", "code": "CS 244B"}, {"title": "Mining Massive Data Sets", "description": "The availability of massive datasets is revolutionizing science and industry. This course discusses data mining and machine learning algorithms for analyzing very large amounts of data. Topics include: Big data systems (Hadoop, Spark); Link Analysis (PageRank, spam detection); Similarity search (locality-sensitive hashing, shingling, min-hashing); Stream data processing; Recommender Systems; Analysis of social-network graphs; Association rules; Dimensionality reduction (UV, SVD, and CUR decompositions); Algorithms for large-scale mining (clustering, nearest-neighbor search); Large-scale machine learning (decision tree ensembles); Multi-armed bandit; Computational advertising. Prerequisites: At least one of CS107 or CS145.", "code": "CS 246"}, {"title": "Mining Massive Data Sets Hadoop Lab", "description": "Supplement to CS 246 providing additional material on the Apache Hadoop family of technologies. Students will learn how to implement data mining algorithms using Hadoop and Apache Spark, how to implement and debug complex data mining and data transformations, and how to use two of the most popular big data SQL tools. Topics: data mining, machine learning, data ingest, and data transformations using Hadoop, Spark, Apache Impala, Apache Hive, Apache Kafka, Apache Sqoop, Apache Flume, Apache Avro, and Apache Parquet.  Prerequisite: CS 107 or equivalent.", "code": "CS 246H"}, {"title": "Cryptocurrencies and blockchain technologies", "description": "For advanced undergraduates and for graduate students.&nbsp; The potential applications for Bitcoin-like technologies is enormous.&nbsp; The course will cover the technical aspects of cryptocurrencies, blockchain technologies, and distributed consensus. Students will learn how these systems work, and how to engineer secure software that interacts with Blockchains like Bitcoin, Ethereum, and others. Prerequisite: CS110. Recommended: CS255.", "code": "CS 251"}, {"title": "Introduction to Cryptography", "description": "For advanced undergraduates and graduate students. Theory and practice of cryptographic techniques used in computer security. Topics: encryption (symmetric and public key), digital signatures, data integrity, authentication, key management, PKI, zero-knowledge protocols, and real-world applications. Prerequisite: basic probability theory.", "code": "CS 255"}, {"title": "Elements of Quantum Computer Programming", "description": "For advanced undergraduates and for graduate students. Quantum computing is an emerging computational paradigm with vast potential. This course is an introduction to modern quantum programming for students who want to work with quantum computing technologies and learn about new paradigms of computation. A physics / quantum mechanics background is not required. Students will learn the model of quantum computation, quantum programming languages, hybrid quantum/classical programming, quantum algorithms, quantum error correction, and applications. The course is hands on using open source Python packages for working with publicly available quantum processors. Prerequisites: linear algebra and programming at the undergraduate level.", "code": "CS 269Q"}, {"title": "Modeling Biomedical Systems (BIOMEDIN 210)", "description": "At the core of informatics is the problem of creating computable models of biomedical phenomena.  This course explores methods for modeling biomedical systems with an emphasis on contemporary semantic technology, including knowledge graphs.  Topics: data modeling, knowledge representation, controlled terminologies, ontologies, reusable problem solvers, modeling problems in healthcare information technology and other aspects of informatics.  Students acquire hands-on experience with several systems and tools.  Prerequisites: CS106A.  Basic familiarity with Python programming, biology, probability, and logic are assumed.", "code": "CS 270"}, {"title": "Introduction to Biomedical Informatics Research Methodology (BIOE 212, BIOMEDIN 212, GENE 212)", "description": "Capstone Biomedical Informatics (BMI) experience. Hands-on software building. Student teams conceive, design, specify, implement, evaluate, and report on a software project in the domain of biomedicine. Creating written proposals, peer review, providing status reports, and preparing final reports. Issues related to research reproducibility. Guest lectures from professional biomedical informatics systems builders on issues related to the process of project management. Software engineering basics. Because the team projects start in the first week of class, attendance that week is strongly recommended. Prerequisites: BIOMEDIN 210 or 214 or 215 or 217 or 260. Preference to BMI graduate students. Consent of instructor required.", "code": "CS 272"}, {"title": "Information Retrieval and Web Search (LINGUIST 286)", "description": "Text information retrieval systems; efficient text indexing; Boolean, vector space, and probabilistic retrieval models; ranking and rank aggregation; evaluating IR systems; text clustering and classification; Web search engines including crawling and indexing, link-based algorithms, web metadata, and question answering; distributed word representations. Prerequisites: CS 107, CS 109, CS 161.", "code": "CS 276"}, {"title": "Research Project in Software Systems and Security", "description": "Topics vary. Focus is on emerging research themes such as programmable open mobile Internet that spans multiple system topics such as human-computer interaction, programming systems, operating systems, networking, and security. May be repeated for credit. Prerequisites: CS 103 and 107.", "code": "CS 294S"}, {"title": "Parallel Computing Research Project", "description": "Advanced topics and new paradigms in parallel computing including parallel algorithms, programming languages, runtime environments, library debugging/tuning tools, and scalable architectures. Research project. Prerequisite: consent of instructor.", "code": "CS 315B"}, {"title": "Advanced Multi-Core Systems", "description": "In-depth coverage of the architectural techniques used in modern, multi-core chips for mobile and server systems. Advanced processor design techniques (superscalar cores, VLIW cores, multi-threaded cores, energy-efficient cores), cache coherence, memory consistency, vector processors, graphics processors, heterogeneous processors, and hardware support for security and parallel programming. Students will become familiar with complex trade-offs between performance-power-complexity and hardware-software interactions. A central part of CS316 is a project on an open research question on multi-core technologies. Prerequisites: EE 180 (formerly 108B) and EE 282. Recommended: CS 149.", "code": "CS 316"}, {"title": "Topics in Computer Systems", "description": "Topics vary every quarter, and may include advanced material being taught for the first time. May be repeated for credit.", "code": "CS 340"}, {"title": "Advanced Operating System Lab: Accelerated (II)", "description": "This is an implementation-heavy, lab-based class that continues the topics from CS240LX. The labs will be more specialized, with an emphasis on research-worthy topics and techniques. The class format will follow CS240LX: two labs, twice a week, along with a set of research papers for context. Enrollment requires instructor permission.", "code": "CS 340LX"}, {"title": "Project in Mining Massive Data Sets", "description": "Students work in teams of three to solve a problem involving the analysis of a massive dataset.  A proposal, early in March is required. There will be an information session (announced in CS246) explaining the datasets available in early March and this information will also be on the CS341 course website in late February.  Each accepted team will be assigned a mentor who will work with them regularly throughout the quarter.  Teams will also be provided access to significant computing resources on a commercial public cloud.", "code": "CS 341"}, {"title": "Domain-Specific Programming Models and Compilers", "description": "This class will cover the principles and practices of domain-specific programming models and compilers for dense and sparse applications in scientific computing, data science, and machine learning. We will study programming models from the recent literature, categorize them, and discuss their properties. We will also discuss promising directions for their compilation, including the separation of algorithm, schedule, and data representation, polyhedral compilation versus rewrite rules, and sparse iteration theory. Prerequisites:  CS143 or equivalent", "code": "CS 343D"}, {"title": "Topics in Computer Networks", "description": "This class could also be called &quot;Build an Internet Router&quot;: Students work in teams of two to build a fully functioning Internet router, gaining hands-on experience building the hardware and software of a high-performance network system.  Students design the control plane in C on a linux host and design the data plane in the new P4 language on both a software switch and a high-speed hardware switch (e.g., Intel Tofino). For the midterm milestone, teams must demonstrate that their routers can interoperate with the other teams by building a small scale datacenter topology. In the final 3-4 weeks of the class, teams will participate in an open-ended design challenge. Prerequisites: At least one student in each team must have taken CS144 at Stanford and completed Lab 3 (static router). No Verilog or FPGA programming experience is required. May be repeated for credit.", "code": "CS 344"}, {"title": "Computer Graphics: Geometric Modeling & Processing", "description": "The mathematical tools needed for the geometrical aspects of computer graphics and especially for modeling smooth shapes. The course covers classical computer-aided design, geometry processing, and data-driven approaches for shape generation. Fundamentals: homogeneous coordinates and transformation. Theory of parametric and implicit curve and surface models: polar forms, B&eacute;zier arcs and de Casteljau subdivision, continuity constraints, B-splines, tensor product, and triangular patch surfaces. Subdivision surfaces and multi-resolution representations of geometry. Surface reconstruction from scattered data points. Geometry processing on meshes, including simplification and parametrization. Deep neural generative models for 3D geometry: parametric and implicit approaches, VAEs and GANs.  Prerequisite: linear algebra at the level of CME103. Recommended: CS248.", "code": "CS 348A"}, {"title": "Computer Graphics: Animation and Simulation", "description": "Core mathematics and methods for computer animation and motion simulation. Traditional animation techniques. Physics-based simulation methods for modeling shape and motion: particle systems, constraints, rigid bodies, deformable models, collisions and contact, fluids, and fracture. Animating natural phenomena. Methods for animating virtual characters and crowds. Additional topics selected from data-driven animation methods, realism and perception, animation systems, motion control, real-time and interactive methods, and multi-sensory feedback. Recommended: CS 148 and/or 205A. Prerequisite: linear algebra.", "code": "CS 348C"}, {"title": "Character Animation: Modeling, Simulation, and Control of Human Motion", "description": "This course introduces technologies and mathematical tools for simulating, modeling, and controlling human/animal movements. Students will be exposed to integrated knowledge and techniques across computer graphics, robotics, machine learning and biomechanics. The topics include numerical integration, 3D character modeling, keyframe animation, skinning/rigging, multi-body dynamics, human kinematics, muscle dynamics, trajectory optimization, learning policies for motor skills, and motion capture. Students who successfully complete this course will be able to use and modify physics simulator for character animation or robotic applications, to design/train control policies for locomotion or manipulation tasks on virtual agents, and to leverage motion capture data for synthesizing realistic virtual humans. The evaluation of this course is based on three assignments and an open-ended research project. Recommended Prerequisite: CS148 or CS205A", "code": "CS 348E"}, {"title": "Computer Graphics in the Era of AI", "description": "This course introduces deep learning methods and AI technologies applied to four main areas of Computer Graphics: rendering, geometry, animation, and imaging. We will study a wide range of problems on content creation for images, shapes, and animations, recently advanced by deep learning techniques. For each problem, we will understand its conventional solutions, study the state-of-the-art learning-based approaches, and critically evaluate their results as well as the impacts to researchers and practitioners in Computer Graphics. The topics include differentiable rendering/neural rendering, BRDF estimation, texture synthesis, denoising, procedural modeling, view synthesis, colorization, style transfer, motion synthesis, differentiable physics simulation, and reinforcement learning. Through programming projects and homework, students who successfully complete this course will be able to use neural rendering algorithms for image manipulation, apply neural procedural modeling for shape and scene synthesis, exploit data-driven methods for simulating physical phenomena, and implement policy learning algorithms for creating character animation. Recommended Prerequisites: CS148, CS231N", "code": "CS 348I"}, {"title": "Visual Computing Systems", "description": "Visual computing tasks such as computational photography, image/video understanding, and real-time 3D graphics are key responsibilities of modern computer systems ranging from sensor-rich smart phones, autonomous robots, and large data centers. These workloads demand exceptional system efficiency and this course examines the key ideas, techniques, and challenges associated with the design of parallel, heterogeneous systems that execute and accelerate visual computing applications. This course is intended for graduate and advanced undergraduate-level students interested in architecting efficient graphics, image processing, and computer vision systems (both new hardware architectures and domain-optimized programming frameworks) and for students in graphics, vision, and ML that seek to understand throughput computing concepts so they can develop scalable algorithms for these platforms. Students will perform daily research paper readings, complete simple programming assignments, and compete a self-selected term project. Prerequisites: CS 107 or equivalent. Highly recommended: Parallel Computing (CS149) or Computer Architecture (EE 282).  Students will benefit from some background in deep learning (CS 230, CS 231N), computer vision (CS 231A), digital image processing (CS 232) or computer graphics (CS248).", "code": "CS 348K"}, {"title": "Topics in Programming Systems", "description": "Advanced material is often taught for the first time as a topics course, perhaps by a faculty member visiting from another institution. May be repeated for credit.", "code": "CS 349"}, {"title": "Cloud Computing Technology", "description": "The largest change in the computer industry over the past ten years has arguably been the emergence of cloud computing: organizations are increasingly moving their workloads to managed public clouds and using new, global-scale services that were simply not possible in private infrastructure. However, both building and using cloud systems remains a black art with many difficult research challenges. This research seminar will cover the latest advances in cloud computing from both industry and academic work and survey challenges including programming interfaces, cloud native applications, resource management, pricing, availability and reliability, privacy and security. Students will propose and develop an original research project in cloud computing. nnPrerequisites: For graduate students, background in computer systems recommended but not required (CS 140/240, 144/244, 244B or 245). Undergrads will need instructor's approval.", "code": "CS 349D"}, {"title": "Technology for Financial Systems", "description": "Financial systems have spurred technological innovation and, in turn, are driven byncutting-edge technological developments. This course explores the synergy.nStudents will learn from faculty and industry experts how to build faster and fairer financial systems. Topics include network infrastructure: data center fabrics, ultra-low latency trading systems; cloud computing infrastructure: building large-scale risk computation platforms using virtual machines, containers and serverless computing. A particular focus will be on challenges and opportunities presented by cloud-native financial exchanges: the course will provide such an exchange and student groups will write programs for high-frequency and algorithmic trading. Recommended: Knowledge of basic Networking, OS, or Distributed Systems (CS 144, 140, or equivalent), as well as basic EE courses (EE 178) will be useful.", "code": "CS 349F"}, {"title": "Selected Reading of Ph.D. Dissertations", "description": "Detailed reading of 5 selected Ph.D. dissertations within a field of computer science. For undergraduates, the course is an introduction to advanced foundational concepts within a field as well as an in-depth look at detailed research. For graduate students, the course focuses on historical reading as well as an opportunity to read dissertations and discuss their strengths and weaknesses. Both groups of students discuss historical context, how ideas succeeded or did not and why, and how they manifest in modern technology. The discussion of each dissertation completes with a guest lecture by its author. The selected dissertations change with each offering but are always from a coherent time period and topic area. Prerequisites: CS110 for undergraduates, EE282 for graduate students.", "code": "CS 349G"}, {"title": "Software Techniques for Emergent Hardware Platforms (EE 292Y)", "description": "Research seminar on software techniques for emergent computational substrates with guest lectures from hardware designers from research and industry. This seminar explores the benefits of novel hardware technologies, the challenges gating broad adoption of these technologies, and how software techniques can help mitigate these challenges and improve the usability of these hardware platforms. Note that the computational substrates discussed vary depending on thensemester. Topics covered include: In-memory computing platforms, dynamical system-solving mixed-signal devices, exible and bendable electronics, neuromorphic computers, intermittent computing platforms, ReRAMs, DNA-based storage, and optical computing platforms. Prerequisites: CS107 or CS107E (required) and EE180 (recommended).", "code": "CS 349H"}, {"title": "Machine Learning for Software Engineering", "description": "In recent years, tools based on machine learning have become increasingly prevalent in the software engineering field. The ubiquity of machine learning is an important factor, but just as important is the availability of software engineering data: there are billions of lines of code available in public repositories (e.g. on GitHub), there is the change history of that code, there are discussion fora (e.g. Stack Overflow) that contain a wealth of information for developers, companies have access tontelemetry on their apps from millions of users, and so on. The scale of software engineering data has permitted machine learning and statistical approaches to imagine tools that are beyond the capabilities of traditional, semantics-based approaches. In this graduate seminar, students will learn the various ways in which code and related artifacts can be treated as data, and how various developer tools can be built by applying machine learning over this data. The course will consist of discussion of a selection of research papers, as well as a hands-on project that can be done in small groups.nnPrerequisites: Familiarity with basic machine learning, and either CS143 or CS295.", "code": "CS 349M"}, {"title": "Project Lab: Video and Audio Technology for Live Theater in the Age of COVID (EE 192T)", "description": "This class is part of a multi-disciplinary collaboration between researchers in the CS, EE, and TAPS departments to design and develop a system to host a live theatrical production that will take place over the Internet in the winter quarter. The performing arts have been greatly affected by a transition to theater over Zoom and its competitors, none of which are great at delivering low-latency audio to actors, or high-quality audio and video to the audience, or feedback from the audience back to actors. These are big technical challenges. During the fall, we'll build a system that improves on current systems in certain areas: audio quality and latency over spotty Internet connections, video quality and realistic composited scenes with multiple actors, audience feedback, and perhaps digital puppetry. Students will learn to be part of a deadline-driven software development effort working to meet the needs of a theater director and creative specialists -- while communicating the effect of resource limits and constraints to a nontechnical audience. This is an experimental hands-on laboratory class, and our direction may shift as the creative needs of the theatrical production evolve. Based on the success of class projects and subsequent needs, some students may be invited to continue in the winter term with a research appointment (for pay or credit) to operate the system you have built and instruct actors and creative professionals how to work with the system through rehearsals and the final performance before spring break. Prerequisites: CS110 or EE102A. Recommended: familiarity with Linux, C++, and Git.", "code": "CS 349T"}, {"title": "Topics in Computer and Network Security", "description": "Research  seminar covering foundational work and current topics in computer and network security. Students will read and discuss published research papers as well as complete an original research project in small groups. Open to Ph.D. and masters students as well as advanced undergraduate students. Prerequisites: While the course has no official prerequisites, students need a mature understanding of software systems and networks to be successful. We strongly encourage students to first take CS155: Computer and Network Security.", "code": "CS 356"}, {"title": "Formal Methods for Computer Systems", "description": "The complexity of modern computer systems requires rigorous and systematic verification/validation techniques to evaluate their ability to correctly and securely support application programs. To this end, a growing body of work in both industry and academia leverages formal methods techniques to solve computer systems challenges. This course is a research seminar that will cover foundational work and current topics in the application of formal methods-style techniques (some possible examples include SAT/SMT, model checking, symbolic execution, theorem proving, program synthesis, fuzzing) to reliable and secure computer systems design. The course can be thought of as an applied formal methods course where the application is reliable and secure architecture, microarchitecture, and distributed systems design. Prior formal methods experience is not necessary. Students will read and discuss published research papers and complete an original research project. Open to PhD and masters students as well as advanced undergraduate students. Prerequisites: EE180 Digital Systems Architecture or comparable course, or consent of instructor.", "code": "CS 357S"}, {"title": "Computer Laboratory", "description": "For CS graduate students. A substantial computer program is designed and implemented; written report required. Recommended as a preparation for dissertation research. Register using the section number associated with the instructor. Prerequisite: consent of instructor.", "code": "CS 393"}, {"title": "Independent Database Project", "description": "For graduate students in Computer Science. Use of database management or file systems for a substantial application or implementation of components of database management system. Written analysis and evaluation required. Register using the section number associated with the instructor. Prerequisite: consent of instructor.", "code": "CS 395"}, {"title": "Independent Project", "description": "Letter grade only. This course is for masters students only. Undergraduate students should enroll in CS199; PhD students should enroll in CS499. Letter grade; if not appropriate, enroll in CS399P. Register using the section number associated with the instructor. Prerequisite: consent of instructor.", "code": "CS 399"}, {"title": "Independent Project", "description": "Graded satisfactory/no credit. This course is for masters students only. Undergraduate students should enroll in CS199; PhD students should enroll in CS499. S/NC only; if not appropriate, enroll in CS399. Register using the section number associated with the instructor. Prerequisite: consent of instructor.", "code": "CS 399P"}, {"title": "Topics in Computer Graphics", "description": "Topic changes each quarter.  Recent topics: computational photography, datanvisualization, character animation, virtual worlds, graphics architectures, advanced rendering.  See http://graphics.stanford.edu/courses for offererings and prerequisites. May be repeated for credit.", "code": "CS 448"}, {"title": "Data Visualization (SYMSYS 195V)", "description": "Techniques and algorithms for creating effective visualizations based on principles from graphic design, visual art, perceptual psychology, and cognitive science.  Topics: graphical perception, data and image models, visual encoding, graph and tree layout, color, animation, interaction techniques, automated design.  Lectures, reading, and project.  Prerequisite: one of CS147, CS148, or equivalent.", "code": "CS 448B"}, {"title": "Topics in Computer Graphics: Agile Hardware Design", "description": "Topic changes each quarter. Recent topics: computational photography, data visualization, character animation, virtual worlds, graphics architectures, advanced rendering.  See http://graphics.stanford.edu/courses for offerings and prerequisites. May be repeated for credit.", "code": "CS 448H"}, {"title": "Computational Imaging (EE 367)", "description": "Digital photography and basic image processing, convolutional neural networks for image processing, denoising, deconvolution, single pixel imaging, inverse problems in imaging, proximal gradient methods, introduction to wave optics, time-of-flight imaging, end-to-end optimization of optics and imaging processing. Emphasis is on applied image processing and solving inverse problems using classic algorithms, formal optimization, and modern artificial intelligence techniques. Students learn to apply material by implementing and investigating image processing algorithms in Python. Term project. Recommended: EE261, EE263, EE278.", "code": "CS 448I"}, {"title": "Making Making Machines for Makers", "description": "An introductory, project-based exploration of systems and processes for making things using computer-aided design and manufacturing, and an introduction to machines and machine tools. Emphasis will be placed on building novel machines and related software for use by &quot;makers&quot; and interactive machines. Course projects will encourage students to understand, build and modify/hack a sequence of machines: (1) an embroidery machine for custom textiles, (2) a paper cutting machine (with drag knife) for ornamental design, and (3) an XY plotter with Arduino controller. Through these projects students explore both (i) principles of operation  (mechanical, stepper motors and servos, electrical control, computer software), and (ii) computer algorithms (trajectory, tool path, design). Current trends in interactive machines will be surveyed. The course will culminate in a final student-selected project. Prerequisite: CS106A or equivalent programming experience. Students should have a desire to make things.", "code": "CS 448M"}, {"title": "Hacking the Pandemic", "description": "This timely project-based course provides a venue for students to apply their skills in computing and other areas to help people cope with the Coronavirus Disease 2019 (CoViD-19) pandemic. In addition to brief lectures, guest speakers, and moderated discussions and brainstorming sessions, the course will primarily consist of self-organized team projects where students find creative ways to contribute by leveraging any and all computational tools at our disposal (e.g., algorithms, app development, HCI, remote interaction and communication, data visualization, modeling and simulation, fabrication and 3d printing, design, computer games, VR, computer systems and networking, AI, statistics, bioinformatics, etc.). Prerequisite: CS106B.", "code": "CS 448P"}, {"title": "Topics in Computer Graphics: Computational Video Manipulation", "description": "The goal of this graduate (advanced undergraduate also welcome) course is to survey recent work on computational video analysis and manipulation techniques. We will learn how to acquire, represent, edit and remix video. Several popular video manipulation algorithms will be presented, with an emphasis on using these techniques to build practical systems. Students will have the opportunity to acquire their own video and implement the processing tools needed to computationally analyze and manipulate it. The course will be project based with a substantial final project.", "code": "CS 448V"}, {"title": "Physically Based Animation and Sound", "description": "Intermediate level, emphasizing physically based simulation techniques for computer animation and synchronized sound synthesis. Topics vary from year to year, but include the simulation of acoustic waves, and integrated approaches to visual and auditory simulation of rigid bodies, deformable solids, collision detection and contact resolution, fracture, fluids and gases, and virtual characters. Students will read and discuss papers, and do programming projects. Prerequisite: None. Recommended: Prior exposure to computer graphics and/or scientific computing.", "code": "CS 448Z"}, {"title": "Virtual Reality", "description": "OpenGL, real-time rendering, 3D display systems, display optics &amp; electronics, IMUs and sensors, tracking, haptics, rendering pipeline, multimodal human perception and depth perception, stereo rendering, presence. Emphasis on VR technology. Hands-on programming assignments. The 3-unit version requires a final programming assignment in which you create your own virtual environment. The 4-unit version requires a final course project and written report in lieu of the final assignment. Prerequisites: Strong programming skills, ENGR 108 or equivalent. Helpful: basic computer graphics / OpenGL.", "code": "EE 267"}, {"title": "Virtual Reality (WIM)", "description": "Writing in the Major (WIM) version of the 4-unit EE 267 theory + lab/project course. This course also meets the EE design requirement. Topics include: OpenGL, real-time rendering, 3D display systems, display optics &amp; electronics, IMUs and sensors, tracking, haptics, rendering pipeline, multimodal human perception and depth perception, stereo rendering, presence. Emphasis on VR technology. Hands-on programming assignments. The 5-unit WIM version requires everything the 4-unit version does, i.e. a final course project and written report in lieu of the final assignment.  The 5-unit WIM version additional requires participation in 2 writing in the major workshops, and weekly writing assignments. Prerequisites: Strong programming skills, ENGR 108 or equivalent. Helpful: basic computer graphics / OpenGL.", "code": "EE 267W"}, {"title": "Digital Systems Engineering", "description": "Electrical issues in the design of high-performance digital systems, including signaling, timing, synchronization, noise, and power distribution. High-speed signaling methods; noise in digital systems, its effect on signaling, and methods for noise reduction; timing conventions; timing noise (skew and jitter), its effect on systems, and methods for mitigating timing noise; synchronization issues and synchronizer design; clock and power distribution problems and techniques; impact of electrical issues on system architecture and design. Prerequisites: EE101A and EE108A. Recommended: EE114/214A.", "code": "EE 273"}, {"title": "Interconnection Networks", "description": "The architecture and design of interconnection networks used to communicate from processor to memory, from processor to processor, and in switches and routers. Topics: network topology, routing methods, flow control, router microarchitecture, and performance analysis. Enrollment limited to 30. Prerequisite: 282.", "code": "EE 382C"}, {"title": "Internet Routing Protocols and Standards", "description": "Local area networks addressing and switching; IEEE 802.1 bridging protocols (transparent bridging, virtual LANs). Internet routing protocols:  interior gateways (RIP, OSPF) and exterior gateways (BGP); multicast routing; multiprotocol label switching (MPLS). Routing in mobile networks: Mobile IP, Mobile Ad Hoc Networks (MANET), Wireless Mesh Networks. Prerequisite: EE 284 or CS 144.", "code": "EE 384A"}, {"title": "Wireless Local and Wide Area Networks", "description": "Characteristics of wireless communication: multipath, noise, and interference. Communications techniques: spread-spectrum, CDMA, and OFDM. IEEE 802.11 physical layer specifications: FHSS, DSSS, IEEE 802.11b (CCK), and 802.11a/g (OFDM). IEEE 802.11 media access control protocols: carrier sense multiple access with collision avoidance (CSMA/CA), point coordination function (PCF), IEEE802.11e for differentiated services. IEEE 802.11 network architecture: ad hoc and infrastructure modes, access point functionality. Management functions: synchronization, power management and association. IEEE 802.11s Mesh Networks. IEEE 802.16 (WiMAX) network architecture and protocols: Physical Layer (OFDMA) and Media Access Control Layer. Current research papers in the open literature. Prerequisite: EE 284 or CS 244A.", "code": "EE 384C"}, {"title": "Performance Engineering of Computer Systems & Networks", "description": "Modeling and control methodologies for high-performance network engineering, including: Markov chains and stochastic modeling, queueing networks and congestion management, dynamic programming and task/processor scheduling, network dimensioning and optimization, and simulation methods. Applications for design of high-performance architectures for wireline/wireless networks and the Internet, including: traffic modeling, admission and congestion control, quality of service support, power control in wireless networks, packet scheduling in switches, video streaming over wireless links, and virus/worm propagation dynamics and countermeasures. Enrollment limited to 30. Prerequisites: basic networking technologies and probability.", "code": "EE 384S"}]}]}